WEBVTT

00:00.020 --> 00:05.120
Another best practice that I'd recommend implementing is adding comments extensively to all of the code

00:05.120 --> 00:09.740
that you want to be used for retrieval when you're using the At codebase command.

00:09.770 --> 00:14.420
The reason why this works is that when you type in a query into at codebase.

00:14.420 --> 00:20.060
So for example, if I load the chat window and then do at codebase, what's happening underneath the

00:20.060 --> 00:24.110
hood is it's using the words after the At codebase and before the At codebase.

00:24.140 --> 00:27.800
So if I was to say for example, what is the home component?

00:27.800 --> 00:31.100
This gets translated into an embeddings query.

00:31.130 --> 00:35.300
Now an embeddings query is a numerical representation of what that is.

00:35.300 --> 00:41.990
But the interesting thing is that if we label our code with comments more extensively, that also gets

00:42.020 --> 00:46.760
added into the embedding space when you're doing this at codebase retrieval step.

00:46.760 --> 00:52.820
So adding comments directly into the code can be a great way of improving code base retrieval.

00:52.850 --> 00:56.600
Now this can be quite manual, and you probably don't want to write comments by hand.

00:56.600 --> 01:01.220
And that's where you could look inside of the GitHub repository, inside of the useful prompts for cursor

01:01.220 --> 01:05.180
folder, and then use the generate comments to MD file.

01:05.180 --> 01:06.620
So I'm just going to paste that in.

01:06.620 --> 01:10.940
And then we can just command K over this and say I want you to generate comments and explain my code

01:10.940 --> 01:11.840
as you write it.

01:11.840 --> 01:17.000
And then essentially what we're doing is then just asking cursor to add comments onto this file.

01:17.000 --> 01:22.330
And the reason why this works is because when these comments are actually added into the embedding space

01:22.330 --> 01:27.760
for each individual file when you're using the codebase reference, let's view this visually so you

01:27.760 --> 01:31.180
can get a better understanding as to how the codebase is actually working.

01:31.210 --> 01:33.550
So what does my navigation component contain?

01:33.550 --> 01:39.040
This query actually gets translated into a bunch of numbers, and then we compare all of these numbers

01:39.040 --> 01:42.250
with previous numbers that we've stored in our code base.

01:42.250 --> 01:46.000
So you can think of each individual file as a series of numbers.

01:46.000 --> 01:52.330
And each of these embeddings contains a spatial representation of what that document means.

01:52.360 --> 01:57.760
Now if we add on comments, we create different types of contextualized embeddings, which is going

01:57.790 --> 02:00.940
to have an impact on what type of documents are retrieved.

02:00.940 --> 02:02.830
So you can see here we have our code base.

02:02.830 --> 02:06.130
We have a query called what does my navigation component contain.

02:06.130 --> 02:11.410
These embeddings are matched against the similarity of other documents inside the code base.

02:11.410 --> 02:13.330
That's normally done using the dot product.

02:13.330 --> 02:16.030
Let's say there's two documents that answer the question.

02:16.030 --> 02:18.460
These are then provided to any LLM.

02:18.460 --> 02:20.320
So ChatGPT or Claude.

02:20.320 --> 02:22.330
And then it gives that final answer.

02:22.330 --> 02:29.170
So basically at this layer by adding comments to the individual files you can change the embeddings

02:29.170 --> 02:34.600
that are created which will affect what type of similar documents come back when you have these types

02:34.600 --> 02:35.410
of queries.

02:35.410 --> 02:41.800
In the next video, we'll have a look at how you can add key phrases to any prompt to improve the output

02:41.800 --> 02:43.330
that you get when using cursor.
